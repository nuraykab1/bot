from aiogram import types, Bot, Dispatcher
from aiogram.enums.parse_mode import ParseMode
import logging
from misc.utils import SQLiter

logger = logging.getLogger(__name__)


def setup_admin_messaging_handlers(dp: Dispatcher, bot: Bot, db: SQLiter, admin_id: int):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""

    @dp.message(lambda message: message.from_user.id != admin_id and not message.text.startswith('/'))
    async def forward_to_admin(message: types.Message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        db.add_message(message.from_user.id, message.from_user.username, message.from_user.full_name, message.text)

        pending_count = db.count_pending_messages()

        user_info = (
            f"üë§ <b>{message.from_user.full_name}</b>\n"
            f"üîó <a href='tg://user?id={message.from_user.id}'>–ü—Ä–æ—Ñ–∏–ª—å</a>\n"
            f"üÜî ID: {message.from_user.id}\n"
        )

        if message.from_user.username:
            user_info += f"üìå Username: @{message.from_user.username}\n"

        text_to_admin = (
            f"üì© <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥–∏!</b>\n\n"
            f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            f"{user_info}\n\n"
            f"üí¨ {message.text}\n\n"
            f"<i>–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /next </i>\n\n"
            f"üìä –í—Å–µ–≥–æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: <b>{pending_count}</b>"
        )

        await bot.send_message(admin_id, text_to_admin, parse_mode=ParseMode.HTML)
        await message.reply("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

    @dp.message(lambda message: message.from_user.id == admin_id and message.text == "/next")
    async def get_next_admin_message(message: types.Message):
        """–í—ã–¥–∞—ë—Ç –∞–¥–º–∏–Ω—É —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ë–î"""
        msg = db.get_next_message()
        if msg:
            msg_id, user_id, username, fullname, text = msg

            user_info = (
                f"üë§ <b>{fullname}</b>\n"
                f"üîó <a href='tg://user?id={user_id}'>–ü—Ä–æ—Ñ–∏–ª—å</a>\n"
                f"üÜî ID: {user_id}\n"
            )

            if username:
                user_info += f"üìå Username: @{username}\n"

            await bot.send_message(
                admin_id,

                f"üì¨ –°–æ–æ–±—â–µ–Ω–∏–µ {msg_id} –æ—Ç:\n"
                f"{user_info}\n\n"
                f"üí¨ {text}\n\n"

                f"<i>–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.</i>"
                f"<i>–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip</i>",
                parse_mode=ParseMode.HTML
            )
            db.update_message_status(msg_id, 'in_progress')
        else:
            await message.reply("‚úÖ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")

    @dp.message(lambda message: message.from_user.id == admin_id and message.text == "/skip")
    async def skip_message(message: types.Message):
        """–ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞"""
        msg = db.get_next_message()
        if msg:
            msg_id = msg[0]
            db.update_message_status(msg_id, 'ignored')
            pending_count = db.count_pending_messages()

            await message.reply(
                f"üóë –°–æ–æ–±—â–µ–Ω–∏–µ ‚Ññ{msg_id} —É–¥–∞–ª–µ–Ω–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏.\n"
                f"üìä –û—Å—Ç–∞–ª–æ—Å—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: <b>{pending_count}</b>",
                parse_mode=ParseMode.HTML
            )
        else:
            await message.reply("‚úÖ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")

    @dp.message(lambda message: message.from_user.id == admin_id and message.reply_to_message)
    async def answer_to_user(message: types.Message):
        """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            lines = message.reply_to_message.text.split("\n")

            # –ü–æ–ª—É—á–∞–µ–º user_id –∏ msg_id
            msg_id_line = lines[0]  # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç msg_id
            user_id_line = next((line for line in lines if "üÜî ID:" in line), None)

            if not user_id_line:
                await message.reply("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                return

            user_id = int(user_id_line.split(":")[1].strip())
            msg_id = int(msg_id_line.split(" ")[2])
            pending_count = db.count_pending_messages() - 1

            await bot.send_message(user_id, f"üì© <b>–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n{message.text}", parse_mode=ParseMode.HTML)
            await message.reply(
                f"<i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ ‚úÖ</i>\n\n"
                f"üìä –û—Å—Ç–∞–ª–æ—Å—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: <b>{pending_count}</b>\n\n"
                f"<i>–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /next</i>",
                parse_mode=ParseMode.HTML
            )
            db.update_message_status(msg_id, 'done')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await message.reply("<i>–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ‚ùå</i>", parse_mode=ParseMode.HTML)
